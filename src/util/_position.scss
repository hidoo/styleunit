@use "sass:math";
@use "sass:meta";
@use "sass:list";
@use "sass:selector";
@use "../lib/function";
@use "../lib/mixin";
@use "../settings";

/*
Position

The position module.

Weight: -93

Style guide: #{settings.$util-prefix}.position
*/

/*
Modifiers

The position modifiers.
Sizes: #{meta.inspect(settings.$util-position)}.
Direction: #{meta.inspect(settings.$util-directions)}.

Weight: -100

Markup: <div class="padding-example {{modifier_class}}"></div>
<style>
  :where(.padding-example) {
    position: relative;
    width: 50px;
    height: 50px;
    background: #999;
  }
</style>

#{settings.$util-prefix}--position-0 - All 0px position
#{settings.$util-prefix}--position-_50 - All -50px position
#{settings.$util-prefix}--position-50 - All 50px position
#{settings.$util-prefix}--position-normal - All normal position
#{settings.$util-prefix}--position-top-0 - Top 0px position
#{settings.$util-prefix}--position-top-_50 - Top -50px position
#{settings.$util-prefix}--position-top-50 - Top 50px position
#{settings.$util-prefix}--position-top-normal - Top normal position
#{settings.$util-prefix}--position-right-0 - Right 0px position
#{settings.$util-prefix}--position-right-_50 - Right -50px position
#{settings.$util-prefix}--position-right-50 - Right 50px position
#{settings.$util-prefix}--position-right-normal - Right normal position
#{settings.$util-prefix}--position-bottom-0 - Bottom 0px position
#{settings.$util-prefix}--position-bottom-_50 - Bottom -50px position
#{settings.$util-prefix}--position-bottom-50 - Bottom 50px position
#{settings.$util-prefix}--position-bottom-normal - Bottom normal position
#{settings.$util-prefix}--position-left-0 - Left 0px position
#{settings.$util-prefix}--position-left-_50 - Left -50px position
#{settings.$util-prefix}--position-left-50 - Left 50px position
#{settings.$util-prefix}--position-left-normal - Left normal position
#{settings.$util-prefix}--position-block-0 - Block 0 position
#{settings.$util-prefix}--position-block-_50 - Block -50px position
#{settings.$util-prefix}--position-block-50 - Block 50px position
#{settings.$util-prefix}--position-block-normal - Block normal position
#{settings.$util-prefix}--position-inline-0 - Inline 0 position
#{settings.$util-prefix}--position-inline-_50 - Inline -50px position
#{settings.$util-prefix}--position-inline-50 - Inline 50px position
#{settings.$util-prefix}--position-inline-normal - Inline normal position
sm:#{settings.$util-prefix}--position-50 - All 50px position if viewport is `"sm"`.
not-sm:#{settings.$util-prefix}--position-50 - All 50px position if viewport is not `"sm"`.

Style guide: #{settings.$util-prefix}.position.builtin
*/
.#{settings.$util-prefix}--position {
  $positions: settings.$util-position;
  $directions: settings.$util-directions;

  @each $position in $positions {
    $name: "";

    // stylelint-disable scss/no-duplicate-dollar-variables
    @if meta.type-of($position) == "list" {
      $name: list.nth($position, 1);
      $position: list.nth($position, 2);
    } @else if $position == "auto" {
      $name: $position;
    } @else {
      $name: function.math-remove-unit($position);

      @if $position < 0 {
        $name: "_#{math.abs($name)}";
      }
    }
    // stylelint-enable scss/no-duplicate-dollar-variables

    @each $direction in $directions {
      $props: ();

      // stylelint-disable scss/no-duplicate-dollar-variables
      @if $direction == "" {
        // prettier-ignore
        $props: ("inset", );
      } @else if $direction == "block" {
        $props: ("top", "bottom");
      } @else if $direction == "inline" {
        $props: ("right", "left");
      } @else {
        // prettier-ignore
        $props: ($direction, );
      }
      // stylelint-enable scss/no-duplicate-dollar-variables

      $direction: if($direction == "", $direction, "-#{$direction}");

      &#{$direction}-#{$name} {
        @each $prop in $props {
          --#{$prop}: #{$position};

          #{$prop}: var(--#{$prop});
        }
      }

      @each $bp, $query in settings.$breakpoints {
        @if meta.type-of($query) == "string" {
          $selector: selector.replace(
            #{&},
            #{&},
            ".#{$bp}\\:#{settings.$util-prefix}--position"
          );

          @at-root {
            #{$selector}-#{$name} {
              @each $prop in $props {
                // stylelint-disable-next-line max-nesting-depth
                @include mixin.media($query: $query) {
                  --#{$prop}: #{$position};

                  #{$prop}: var(--#{$prop});
                }
              }
            }
          }
        }
      }
    }
  }
}
