@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "sass:selector";
@use "../lib/mixin";
@use "../settings";

/*
Border

The border module.

Weight: -94

Style guide: #{settings.$util-prefix}.border
*/

/*
Modifiers

The border modifiers.
Sizes: #{meta.inspect(settings.$util-border)}.
Direction: #{meta.inspect(settings.$util-directions)}.

Weight: -100

Markup: <div class="border-example {{modifier_class}}"></div>
<style>
  :where(.border-example) {
    position: relative;
    width: 50px;
    height: 50px;
    color: #900;
    background: #999;
  }
</style>

#{settings.$util-prefix}--border-normal - All normal border
#{settings.$util-prefix}--border-top-normal - Top normal border
#{settings.$util-prefix}--border-right-normal - Right normal border
#{settings.$util-prefix}--border-bottom-normal - Bottom normal border
#{settings.$util-prefix}--border-left-normal - Left normal border
#{settings.$util-prefix}--border-block-normal - Block normal border
#{settings.$util-prefix}--border-inline-normal - Inline normal border
sm:#{settings.$util-prefix}--border-normal - All normal border if viewport is `"sm"`.
not-sm:#{settings.$util-prefix}--border-normal - All normal border if viewport is not `"sm"`.

Style guide: #{settings.$util-prefix}.border.builtin
*/
.#{settings.$util-prefix}--border {
  $borders: settings.$util-border;
  $directions: settings.$util-directions;

  @each $border in $borders {
    $name: "";

    // stylelint-disable scss/no-duplicate-dollar-variables
    @if meta.type-of($border) == "list" {
      $name: list.nth($border, 1);
      $border: list.nth($border, 2);
    }
    // stylelint-enable scss/no-duplicate-dollar-variables

    @each $direction in $directions {
      $direction: if($direction == "", $direction, "-#{$direction}");

      &#{$direction}-#{$name} {
        --border#{$direction}: #{$border};

        border#{$direction}: var(--border#{$direction});
      }

      @each $bp, $query in settings.$breakpoints {
        @if meta.type-of($query) == "string" {
          $selector: selector.replace(
            #{&},
            #{&},
            ".#{$bp}\\:#{settings.$util-prefix}--border"
          );

          @at-root {
            #{$selector}#{$direction}-#{$name} {
              // stylelint-disable-next-line max-nesting-depth
              @include mixin.media($query: $query) {
                --border#{$direction}: #{$border};

                border#{$direction}: var(--border#{$direction});
              }
            }
          }
        }
      }
    }
  }
}
