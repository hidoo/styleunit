@use "sass:map";
@use "sass:meta";
@use "../../lib/mixin";
@use "../../settings";

/// Package name
/// @access private
/// @type String
///
$_pkg: settings.$pkg !default;

/*
Theme

The theme module.

Weight: -99

Style guide: #{settings.$prefix}-input.theme
*/

@if meta.type-of(settings.$builtin-themes) == "map" {
  /*
Modifiers

The theme modifiers.

Weight: -100

Markup: <!-- input -->
<input class="#{settings.$prefix}-input  {{modifier_class}}" type="text" name="{{modifier_class}}" value="" placeholder="Lorem ipsum dolor sit amet." />
<!-- input:disabled -->
<input class="#{settings.$prefix}-input  {{modifier_class}}" type="text" name="{{modifier_class}}" value="" placeholder="あのイーハトーヴォのすきとおった風。" disabled="disabled" />
<!-- textarea -->
<textarea class="#{settings.$prefix}-input  {{modifier_class}}" name="{{modifier_class}}" rows="5" cols="10" placeholder="Lorem ipsum dolor sit amet."></textarea>

#{settings.$prefix}-input--theme-normal - Normal theme

Style guide: #{settings.$prefix}-input.theme.builtin
*/
  .#{settings.$prefix}-input--theme {
    &-normal {
      $default-theme: map.get(settings.$builtin-themes, "light");

      // Load colors
      --color-up: rgb(
        var(--#{$_pkg}-color-#{map.get($default-theme, "color")})
      );
      --color-focus: rgb(
        var(--#{$_pkg}-color-#{map.get($default-theme, "color-focus")})
      );
      --background-color-up: rgb(
        var(--#{$_pkg}-color-#{map.get($default-theme, "background")})
      );
      --background-color-focus: rgb(
        var(--#{$_pkg}-color-#{map.get($default-theme, "background-focus")})
      );
      --border-color-up: rgb(
        var(--#{$_pkg}-color-#{map.get($default-theme, "border")})
      );
      --border-color-focus: rgb(
        var(--#{$_pkg}-color-#{map.get($default-theme, "border-focus")})
      );

      // Default settings
      --padding: 10px;
      --border-radius: 3px;
      --color: var(--color-up);
      --background-color: var(--background-color-up);
      --border: 1px solid var(--border-color-up);
      --box-shadow: inset rgb(0, 0, 0, 0.1) 0 2px 2px;
      --transition: border-color 0.1s ease-out;

      box-shadow: var(--box-shadow);
      transition: var(--transition);

      @include mixin.on-focus() {
        --border: 1px solid var(--border-color-focus);
      }

      @include mixin.on-disabled() {
        --border: 1px solid var(--border-color-up);
      }

      @include mixin.on-placeholder() {
        --color: var(--color-focus);
      }

      // Settings by color schemes
      @each $name, $theme in settings.$builtin-themes {
        @media (prefers-color-scheme: #{$name}) {
          $color-up: map.get($theme, "color");
          $color-focus: map.get($theme, "color-focus");
          $background-up: map.get($theme, "background");
          $background-focus: map.get($theme, "background-focus");
          $border-up: map.get($theme, "border");
          $border-focus: map.get($theme, "border-focus");

          // Apply colors to settings
          --color-up: rgb(var(--#{$_pkg}-color-#{$color-up}));
          --color-focus: rgb(var(--#{$_pkg}-color-#{$color-focus}));
          --background-color-up: rgb(var(--#{$_pkg}-color-#{$background-up}));
          --background-color-focus: rgb(
            var(--#{$_pkg}-color-#{$background-focus})
          );
          --border-color-up: rgb(var(--#{$_pkg}-color-#{$border-up}));
          --border-color-focus: rgb(var(--#{$_pkg}-color-#{$border-focus}));
          --box-shadow: inset rgb(0, 0, 0, #{if($name == "light", 0.1, 0.5)}) 0
            2px 2px;
        }
      }
    }
  }
}
