@use "sass:map";
@use "sass:meta";
@use "sass:string";
@use "../../lib/function";
@use "../../lib/mixin";
@use "../../settings";

/*
radio

radio modifiers of #{settings.$prefix}-toggle

Weight: -99

Style guide: #{settings.$prefix}-toggle.radio
*/

/*
modifiers: radio

builtin modifiers of radio for #{settings.$prefix}-toggle

Weight: -100

Markup: <!-- single -->
<span class="#{settings.$prefix}-toggle  {{modifier_class}}">
  <input class="#{settings.$prefix}-toggle__field" type="radio" name="{{modifier_class}}" value="1" />
  <span class="#{settings.$prefix}-toggle__alt"></span>
</span>
<!-- single:disabled -->
<span class="#{settings.$prefix}-toggle  {{modifier_class}}">
  <input class="#{settings.$prefix}-toggle__field" type="radio" name="{{modifier_class}}" value="2" checked="checked" disabled="disabled" />
  <span class="#{settings.$prefix}-toggle__alt"></span>
</span>
<!-- with label -->
<label>
  <span class="#{settings.$prefix}-toggle  {{modifier_class}}">
    <input class="#{settings.$prefix}-toggle__field" type="radio" name="{{modifier_class}}" value="3" />
    <span class="#{settings.$prefix}-toggle__alt"></span>
  </span>
  Lorem ipsum dolor sit amet.
</label>

#{settings.$prefix}-toggle--radio-light - light radio
#{settings.$prefix}-toggle--radio-dark - dark radio

Style guide: #{settings.$prefix}-toggle.radio.builtin
*/
.#{settings.$prefix}-toggle--radio {
  $selector: string.unique-id();
  $selector-field: string.unique-id();
  $selector-alt: string.unique-id();
  $selector-alt-checked: string.unique-id();
  $selectors-selected: function.selector-merge-state("selected");
  $selectors-focus: function.selector-merge-state("focus");
  $selectors-disabled: function.selector-merge-state("disabled");

  // define placeholder class
  @include mixin.placeholder-define($name: $selector) {
    vertical-align: middle;
  }

  // define placeholder class of field
  @include mixin.placeholder-define($name: $selector-field) {
    position: absolute;
    z-index: 1;
    top: 0;
    left: 0;

    width: 100%;
    height: 100%;

    opacity: 0;
  }

  // define placeholder class of alt
  @include mixin.placeholder-define($name: $selector-alt) {
    z-index: 0;

    display: block;

    width: 20px;
    height: 20px;

    border-style: solid;
    border-width: 1px;
    border-radius: 20px;

    &::before {
      content: "";

      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      transform-origin: 50% 50%;
      transform: scale(0);

      width: 12px;
      height: 12px;
      margin: auto;

      border-radius: 12px;

      transition-timing-function: cubic-bezier(0.68, -0.55, 0.27, 1.55);
      transition-duration: 0.2s;
      transition-property: transform;
    }
  }

  // define placeholder class of alt when checked
  @include mixin.placeholder-define($name: $selector-alt-checked) {
    &::before {
      transform: scale(1);
    }
  }

  @if meta.type-of(settings.$builtin-themes) == "map" {
    @each $name, $theme in settings.$builtin-themes {
      $color: map.get($theme, "color");
      $color-focus: map.get($theme, "color-focus");

      &-#{$name} {
        $selector-alt-focus: string.unique-id();
        $selector-alt-disabled: string.unique-id();

        @extend %#{$selector};

        // define placeholder class of alt when focus
        @include mixin.placeholder-define($name: $selector-alt-focus) {
          border-color: $color-focus;
        }

        // define placeholder class of alt when disabled
        @include mixin.placeholder-define($name: $selector-alt-disabled) {
          border-color: $color;
        }

        > .#{settings.$prefix}-toggle__field {
          @extend %#{$selector-field};

          + .#{settings.$prefix}-toggle__alt {
            @extend %#{$selector-alt};

            border-color: $color;

            // stylelint-disable-next-line max-nesting-depth
            &::before {
              background-color: $color;
            }
          }
        }

        // when checked
        @each $state in $selectors-selected {
          > .#{settings.$prefix}-toggle__field#{$state} {
            + .#{settings.$prefix}-toggle__alt {
              @extend %#{$selector-alt-checked};
            }
          }
        }

        @each $state in $selectors-focus {
          > .#{settings.$prefix}-toggle__field#{$state} {
            + .#{settings.$prefix}-toggle__alt {
              @extend %#{$selector-alt-focus};
            }
          }
        }

        @each $state in $selectors-disabled {
          > .#{settings.$prefix}-toggle__field#{$state} {
            + .#{settings.$prefix}-toggle__alt {
              @extend %#{$selector-alt-disabled};
            }
          }
        }
      }
    }
  }
}
